scalar Long
scalar JSON

enum DataFormat {
    JSON
    BINARY
}

type Query {
    # Get current value of a topic from LastValueStore
    currentValue(topic: String!, format: DataFormat = JSON, archiveGroup: String = "Default"): TopicValue
    
    # Get current values matching a topic filter
    currentValues(topicFilter: String!, format: DataFormat = JSON, limit: Int = 100, archiveGroup: String = "Default"): [TopicValue!]!
    
    # Get retained message for a specific topic
    retainedMessage(topic: String!, format: DataFormat = JSON): RetainedMessage
    
    # Get all retained messages matching a filter
    retainedMessages(topicFilter: String, format: DataFormat = JSON, limit: Int = 100): [RetainedMessage!]!
    
    # Query historical messages from archive
    archivedMessages(
        topicFilter: String!
        startTime: String
        endTime: String
        format: DataFormat = JSON
        limit: Int = 100
        archiveGroup: String = "Default"
    ): [ArchivedMessage!]!
    
    # Search for topics by name pattern
    searchTopics(
        pattern: String!
        limit: Int = 100
        archiveGroup: String = "Default"
    ): [String!]!
    
    # User Management
    getAllUsers: [UserInfo!]!
    getUser(username: String!): UserInfo
    getUserAclRules(username: String!): [AclRuleInfo!]!
    getAllAclRules: [AclRuleInfo!]!
}

type Mutation {
    # Authentication (no token required)
    login(input: LoginInput!): LoginResult!
    
    # Publish a message to a topic (requires token + ACL check)
    publish(input: PublishInput!): PublishResult!
    
    # Publish multiple messages (requires token + ACL check)
    publishBatch(inputs: [PublishInput!]!): [PublishResult!]!
    
    # User Management (requires admin token)
    createUser(input: CreateUserInput!): UserManagementResult!
    updateUser(input: UpdateUserInput!): UserManagementResult!
    deleteUser(username: String!): UserManagementResult!
    setPassword(input: SetPasswordInput!): UserManagementResult!
    
    # ACL Rule Management (requires admin token)
    createAclRule(input: CreateAclRuleInput!): UserManagementResult!
    updateAclRule(input: UpdateAclRuleInput!): UserManagementResult!
    deleteAclRule(id: String!): UserManagementResult!
}

type Subscription {
    # Subscribe to real-time topic updates
    topicUpdates(topicFilter: String!, format: DataFormat = JSON): TopicUpdate!
    
    # Subscribe to multiple topic filters
    multiTopicUpdates(topicFilters: [String!]!, format: DataFormat = JSON): TopicUpdate!
}

input PublishInput {
    topic: String!
    payload: String!
    format: DataFormat = JSON
    qos: Int = 0
    retained: Boolean = false
}

type PublishResult {
    success: Boolean!
    topic: String!
    timestamp: Long!
    error: String
}

type TopicValue {
    topic: String!
    payload: String!
    format: DataFormat!
    timestamp: Long!
    qos: Int!
}

type RetainedMessage {
    topic: String!
    payload: String!
    format: DataFormat!
    timestamp: Long!
    qos: Int!
}

type ArchivedMessage {
    topic: String!
    payload: String!
    format: DataFormat!
    timestamp: Long!
    qos: Int!
    clientId: String
}

type TopicUpdate {
    topic: String!
    payload: String!
    format: DataFormat!
    timestamp: Long!
    qos: Int!
    retained: Boolean!
    clientId: String
}

# User Management Types

type UserInfo {
    username: String!
    enabled: Boolean!
    canSubscribe: Boolean!
    canPublish: Boolean!
    isAdmin: Boolean!
    createdAt: String
    updatedAt: String
}

type AclRuleInfo {
    id: String!
    username: String!
    topicPattern: String!
    canSubscribe: Boolean!
    canPublish: Boolean!
    priority: Int!
    createdAt: String
}

input CreateUserInput {
    username: String!
    password: String!
    enabled: Boolean = true
    canSubscribe: Boolean = true
    canPublish: Boolean = true
    isAdmin: Boolean = false
}

input UpdateUserInput {
    username: String!
    enabled: Boolean
    canSubscribe: Boolean
    canPublish: Boolean
    isAdmin: Boolean
}

input SetPasswordInput {
    username: String!
    password: String!
}

input CreateAclRuleInput {
    username: String!
    topicPattern: String!
    canSubscribe: Boolean = false
    canPublish: Boolean = false
    priority: Int = 0
}

input UpdateAclRuleInput {
    id: String!
    username: String
    topicPattern: String
    canSubscribe: Boolean
    canPublish: Boolean
    priority: Int
}

# Authentication Types
input LoginInput {
    username: String!
    password: String!
}

type LoginResult {
    success: Boolean!
    token: String
    message: String
    username: String
    isAdmin: Boolean!
}

type UserManagementResult {
    success: Boolean!
    message: String
    user: UserInfo
    aclRule: AclRuleInfo
}