#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Detect architecture and set tag suffix
ARCH=$(uname -m)
ARCH_SUFFIX=""
if [ "$ARCH" = "aarch64" ]; then
    ARCH_SUFFIX="-arm64"
fi

# Parse command line arguments
TESTING=false
PUBLISH_MODE="ask"  # can be "ask", "yes", or "no"
DOCKER_ONLY=false   # skip Maven build if true

for arg in "$@"; do
    case $arg in
        --testing|-t)
            TESTING=true
            ;;
        -d)
            DOCKER_ONLY=true
            ;;
        -n)
            PUBLISH_MODE="no"
            ;;
        -y)
            PUBLISH_MODE="yes"
            ;;
        *)
            echo "Unknown argument: $arg"
            echo "Usage: $0 [--testing|-t] [-d] [-n] [-y]"
            echo "  --testing, -t  Build testing image"
            echo "  -d             Docker only (skip Maven build)"
            echo "  -n             Do not publish to Docker Hub"
            echo "  -y             Publish to Docker Hub without asking"
            exit 1
            ;;
    esac
done

if [ "$TESTING" = true ]; then
    echo -e "${YELLOW}Building Docker image for MonsterMQ (testing)...${NC}"
else
    # Read version from version.txt
    version=`cat ../version.txt | cut -d'+' -f1`
    echo -e "${YELLOW}Building Docker image for MonsterMQ v${version}...${NC}"
fi

# Build the broker with Maven (unless -d flag is set)
if [ "$DOCKER_ONLY" = false ]; then
    echo -e "${YELLOW}Running mvn package in broker directory...${NC}"
    cd ../broker
    mvn package
    if [ $? -ne 0 ]; then
        echo -e "${RED}✗ Maven build failed${NC}"
        exit 1
    fi
    cd ../docker
else
    echo -e "${YELLOW}Skipping Maven build (-d flag set)${NC}"
fi

# Copy files from broker/target to docker/target for Docker build
echo -e "${YELLOW}Copying JAR and dependencies from broker/target...${NC}"
rm -rf target
mkdir -p target
cp ../broker/target/broker-1.0-SNAPSHOT.jar target/
cp -r ../broker/target/dependencies target/

# Build Docker image
if [ "$TESTING" = true ]; then
    docker build -t rocworks/monstermq:testing$ARCH_SUFFIX .
else
    docker build -t rocworks/monstermq:$version$ARCH_SUFFIX -t rocworks/monstermq:latest$ARCH_SUFFIX .
fi

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✓ Docker image built successfully${NC}"
    if [ "$TESTING" = true ]; then
        echo -e "${GREEN}  - rocworks/monstermq:testing${ARCH_SUFFIX}${NC}"
    else
        echo -e "${GREEN}  - rocworks/monstermq:${version}${ARCH_SUFFIX}${NC}"
        echo -e "${GREEN}  - rocworks/monstermq:latest${ARCH_SUFFIX}${NC}"
    fi

    # Handle publishing based on mode
    SHOULD_PUSH=false

    if [ "$PUBLISH_MODE" = "yes" ]; then
        SHOULD_PUSH=true
    elif [ "$PUBLISH_MODE" = "ask" ]; then
        echo ""
        read -p "Do you want to push the Docker image to Docker Hub? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            SHOULD_PUSH=true
        fi
    fi

    if [ "$SHOULD_PUSH" = true ]; then
        echo -e "${YELLOW}Pushing Docker image to Docker Hub...${NC}"
        if [ "$TESTING" = true ]; then
            docker push rocworks/monstermq:testing$ARCH_SUFFIX
        else
            docker push rocworks/monstermq:latest$ARCH_SUFFIX
            docker push rocworks/monstermq:$version$ARCH_SUFFIX
        fi
        echo -e "${GREEN}✓ Docker image pushed successfully${NC}"
    else
        echo -e "${YELLOW}Docker image not pushed. To push later, run:${NC}"
        if [ "$TESTING" = true ]; then
            echo "  docker push rocworks/monstermq:testing$ARCH_SUFFIX"
        else
            echo "  docker push rocworks/monstermq:latest$ARCH_SUFFIX"
            echo "  docker push rocworks/monstermq:$version$ARCH_SUFFIX"
        fi
    fi
else
    echo -e "${RED}✗ Docker build failed${NC}"
    exit 1
fi

# Clean up temporary files
echo -e "${YELLOW}Cleaning up temporary files...${NC}"
rm -rf target/
echo -e "${GREEN}✓ Cleanup complete${NC}"
